name: Enhanced Daily Contributions

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily
  workflow_dispatch:  # Allow manual trigger

jobs:
  make-contribution:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Configure Git user
        run: |
          git config --global user.email "ramincsy2@gmail.com"
          git config --global user.name "ramincsy"

      - name: Get current date info
        run: |
          echo "day=$(date +'%d')" >> $GITHUB_ENV
          echo "month=$(date +'%m')" >> $GITHUB_ENV
          echo "year=$(date +'%Y')" >> $GITHUB_ENV

      - name: Generate daily content
        run: |
          python generate_content.py || echo "No content generated."

      - name: Stash changes and pull latest
        run: |
          git stash || echo "No local changes to stash"
          git pull origin ramincsy-patch-1 --rebase || echo "No updates to pull"
          git stash pop || echo "No stashed changes to apply"

      - name: Create and Push Multiple Branches
        run: |
          for i in {1..4}; do
            BRANCH_NAME="daily-contribution-${{ env.year }}-${{ env.month }}-PR$i"
            git checkout -b $BRANCH_NAME || git checkout $BRANCH_NAME
            git add .
            git commit -m "Automated contribution for branch $BRANCH_NAME ðŸš€" || echo "No changes to commit for $BRANCH_NAME"
            git push origin $BRANCH_NAME --force
            echo "Created branch $BRANCH_NAME"
            sleep 10
          done

      - name: Create Multiple Pull Requests
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN2 }}
          script: |
            async function delay(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }

            for (let i = 1; i <= 4; i++) {
              const branchName = `daily-contribution-${process.env.year}-${process.env.month}-PR${i}`;
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Automated Pull Request for ${branchName}`,
                head: branchName,
                base: "ramincsy-patch-1",
                body: `This Pull Request was automatically generated for branch ${branchName}.`,
              });
              console.log(`Created PR #${pr.data.number} for branch ${branchName}`);
              await delay(6000); // 6-second delay between PRs
            }

  manage-issues:
    runs-on: ubuntu-22.04
    steps:
      - name: Close all open issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN2 }}
          script: |
            async function delay(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });

            if (issues.data.length === 0) {
              console.log("No open issues found.");
              return;
            }

            for (const issue of issues.data) {
              console.log(`Processing issue #${issue.number}: ${issue.title}`);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `This issue is being closed automatically as part of the daily workflow. Thank you for your contributions!`,
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: "closed",
              });

              console.log(`Closed issue #${issue.number}.`);
              await delay(5000); // Delay to avoid hitting rate limits
            }

      - name: Create 4 new issues with delay
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN2 }}
          script: |
            async function delay(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }

            for (let i = 1; i <= 4; i++) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Daily Issue ${i}: ${new Date().toISOString().split('T')[0]}`,
                body: `This is automatically generated issue number ${i} for the day.`,
              });
              console.log(`Created issue #${issue.data.number}`);
              await delay(5000); // 5-second delay between issues
            }
