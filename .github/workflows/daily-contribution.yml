name: Enhanced Daily Contributions

on:
  schedule:
    - cron: '0 */12 * * *'  # Run every 12 hours
  workflow_dispatch:  # Allow manual trigger

jobs:
  make-contribution:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install octokit fs-extra

      # Step 4: Run Node.js script for daily contributions
      - name: Generate daily contributions
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          node <<EOF
          const { Octokit } = require("@octokit/rest");
          const fs = require("fs-extra");
          const path = require("path");

          const token = process.env.GH_TOKEN;
          const octokit = new Octokit({ auth: token });

          async function main() {
              const date = new Date();
              const year = date.getFullYear();
              const month = String(date.getMonth() + 1).padStart(2, "0");
              const day = String(date.getDate()).padStart(2, "0");

              const topics = ["AI", "Machine Learning", "Data Science", "Web Development", "Cloud Computing"];
              const generateContent = () => `Daily study topic: ${topics[Math.floor(Math.random() * topics.length)]}`;

              // Update README.md
              const readmePath = path.join(process.cwd(), "README.md");
              const readmeContent = fs.existsSync(readmePath) ? fs.readFileSync(readmePath, "utf-8") : "";
              const newContent = `\n\n## Contribution for ${year}-${month}-${day}\n` +
                                 Array.from({ length: parseInt(day) }, generateContent).join("\n");
              fs.writeFileSync(readmePath, readmeContent + newContent);

              // Create directory structure
              const updatesDir = path.join(process.cwd(), `updates/${year}/${month}`);
              fs.ensureDirSync(updatesDir);

              const dailyUpdatePath = path.join(updatesDir, `${day}.md`);
              fs.writeFileSync(dailyUpdatePath, `Daily update for ${year}-${month}-${day}`);

              console.log("Content generated and files updated.");

              // Commit and push changes
              const repoOwner = "ramincsy";
              const repoName = "Auto";
              const branchName = `daily-contribution-${year}-${month}`;
              
              // Get default branch and create a branch if it doesn't exist
              const { data: repoData } = await octokit.repos.get({ owner: repoOwner, repo: repoName });
              const baseBranch = repoData.default_branch;

              try {
                  await octokit.git.getRef({ owner: repoOwner, repo: repoName, ref: `heads/${branchName}` });
              } catch {
                  console.log(`Creating branch: ${branchName}`);
                  const { data: baseRef } = await octokit.git.getRef({ owner: repoOwner, repo: repoName, ref: `heads/${baseBranch}` });
                  await octokit.git.createRef({
                      owner: repoOwner,
                      repo: repoName,
                      ref: `refs/heads/${branchName}`,
                      sha: baseRef.object.sha,
                  });
              }

              // Commit changes
              const { data: { sha: latestCommitSha } } = await octokit.repos.getCommit({
                  owner: repoOwner,
                  repo: repoName,
                  ref: `heads/${branchName}`
              });

              const { data: { sha: latestTreeSha } } = await octokit.git.getCommit({
                  owner: repoOwner,
                  repo: repoName,
                  commit_sha: latestCommitSha,
              });

              const files = [
                  { path: "README.md", content: fs.readFileSync(readmePath, "utf-8") },
                  { path: `updates/${year}/${month}/${day}.md`, content: fs.readFileSync(dailyUpdatePath, "utf-8") },
              ];

              const tree = await octokit.git.createTree({
                  owner: repoOwner,
                  repo: repoName,
                  base_tree: latestTreeSha,
                  tree: files.map(file => ({
                      path: file.path,
                      mode: "100644",
                      type: "blob",
                      content: file.content,
                  })),
              });

              const newCommit = await octokit.git.createCommit({
                  owner: repoOwner,
                  repo: repoName,
                  message: `Daily contribution for ${year}-${month}-${day}`,
                  tree: tree.data.sha,
                  parents: [latestCommitSha],
              });

              await octokit.git.updateRef({
                  owner: repoOwner,
                  repo: repoName,
                  ref: `heads/${branchName}`,
                  sha: newCommit.data.sha,
              });

              console.log("Changes committed and pushed.");

              // Create pull request
              await octokit.pulls.create({
                  owner: repoOwner,
                  repo: repoName,
                  head: branchName,
                  base: baseBranch,
                  title: `Daily Contribution: ${year}-${month}-${day}`,
                  body: "This is an automated contribution update.",
              });

              console.log("Pull request created.");
          }

          main().catch(err => {
              console.error(err);
              process.exit(1);
          });
          EOF
